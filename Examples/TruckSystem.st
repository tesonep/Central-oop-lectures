TestCase subclass: #TRTruckTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TruckSystem'!!TRTruckTest methodsFor: 'tests' stamp: '9/24/2024 16:12'!testCanLoadOfAPackageThatFits	| t p |	t := TRTruck new.	t setMaxWeight: 700 andVolume: 25.	p := TRPacket new.	p setWeight: 10 andVolume: 2.	self assert: (t canLoad: p).! !!TRTruckTest methodsFor: 'tests' stamp: '9/24/2024 16:14'!testCanLoadOfAPackageThatDontFitsByVolume	| t p |	t := TRTruck new.	t setMaxWeight: 700 andVolume: 25.	p := TRPacket new.	p setWeight: 10 andVolume: 30.	self deny: (t canLoad: p)			! !!TRTruckTest methodsFor: 'tests' stamp: '9/24/2024 16:14'!testCanLoadOfAPackageThatDontFitsByWeight	| t p |	t := TRTruck new.	t setMaxWeight: 700 andVolume: 25.	p := TRPacket new.	p setWeight: 800 andVolume: 2.	self deny: (t canLoad: p)			! !!TRTruckTest methodsFor: 'tests' stamp: '9/24/2024 16:22'!testLoadAPacket	| t p |	t := TRTruck new.	t setMaxWeight: 700 andVolume: 25.	p := TRPacket new.	p setWeight: 10 andVolume: 2.	t load: p	.		self assert: (t hasPackage: p) ! !!TRTruckTest methodsFor: 'tests' stamp: '9/24/2024 16:26'!testCanLoadAPackageInAFullTruckShouldFail	| t p p2 |	t := TRTruck new.	t setMaxWeight: 700 andVolume: 25.	p := TRPacket new.	p setWeight: 10 andVolume: 25.	t load: p	.		p2 := TRPacket new.	p2 setWeight: 1 andVolume: 1.		self deny: (t canLoad: p2) 	! !Object subclass: #TRTruck	instanceVariableNames: 'maxWeight maxVolume packages'	classVariableNames: ''	package: 'TruckSystem'!!TRTruck methodsFor: 'initialization' stamp: '9/24/2024 16:04'!setMaxWeight: aWeight andVolume: aVolume	maxWeight := aWeight.	maxVolume := aVolume ! !!TRTruck methodsFor: 'initialization' stamp: '9/24/2024 16:19'!load: aPacket	(self canLoad: aPacket) 		ifFalse: [ self error: 'Agghghghg I can''t' ].		packages add: aPacket.! !!TRTruck methodsFor: 'initialization' stamp: '9/24/2024 16:21'!initialize 	packages := Set new! !!TRTruck methodsFor: 'initialization' stamp: '9/24/2024 16:23'!hasPackage: aPacket	^ packages includes: aPacket! !!TRTruck methodsFor: 'testing' stamp: '9/24/2024 16:27'!canLoad: aPacket	^ (self remainingVolume >= aPacket volume) and: [ self remainingWeight >= aPacket weight ]! !!TRTruck methodsFor: 'as yet unclassified' stamp: '9/24/2024 16:28'!remainingVolume	^ maxVolume - (packages sum: [:eachPackage | eachPackage volume])! !!TRTruck methodsFor: 'as yet unclassified' stamp: '9/24/2024 16:28'!remainingWeight	^ maxWeight - (packages sum: [:eachPackage | eachPackage weight])! !Object subclass: #TRPacket	instanceVariableNames: 'weight volume'	classVariableNames: ''	package: 'TruckSystem'!!TRPacket methodsFor: 'initialization' stamp: '9/24/2024 16:06'!setWeight: aWeight andVolume: aVolume	weight  := aWeight.	volume  := aVolume ! !!TRPacket methodsFor: 'accessing' stamp: '9/24/2024 16:10'!volume	^ volume ! !!TRPacket methodsFor: 'accessing' stamp: '9/24/2024 16:10'!weight	^ weight! !